import {
  generateSecretKeySeed,
  decodeSecretKeySeed
} from '@digitalcredentials/bnid'
import { Ed25519VerificationKey2020 } from '@digitalcredentials/ed25519-verification-key-2020'
import { CryptoLD } from 'crypto-ld'

import { driver as keyDriver } from '@digitalcredentials/did-method-key'
import { driver as webDriver } from '@interop/did-web-resolver'

export default async function generateSeed({ url = false }) {
  const seed = await generateSecretKeySeed()
  const decodedSeed = await decodeSeed(seed)
  let didDocument
  if (url) {
    const cryptoLd = new CryptoLD()
    cryptoLd.use(Ed25519VerificationKey2020)
    const didDriver = webDriver({ cryptoLd })
    const result = await didDriver.generate({ seed: decodedSeed, url })
    didDocument = result.didDocument
  } else {
    const didDriver = keyDriver()
    const result = await didDriver.generate({ seed: decodedSeed })
    didDocument = result.didDocument
  }
  const did = didDocument.id
  return { seed, decodedSeed, did, didDocument }
}

const decodeSeed = async (secretKeySeed) => {
  let secretKeySeedBytes // Uint8Array;
  if (secretKeySeed.startsWith('z')) {
    // This is a multibase-decoded key seed, like those generated by @digitalcredentials/did-cli
    secretKeySeedBytes = decodeSecretKeySeed({ secretKeySeed })
  } else if (secretKeySeed.length >= 32) {
    secretKeySeedBytes = new TextEncoder().encode(secretKeySeed).slice(0, 32)
  } else {
    throw TypeError(
      '"secretKeySeed" must be at least 32 bytes, preferably multibase-encoded.'
    )
  }
  return secretKeySeedBytes
}

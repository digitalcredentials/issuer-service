import { generateSecretKeySeed, decodeSecretKeySeed } from '@digitalcredentials/bnid';

let CONFIG;
const defaultPort = 4007
const defaultTestSeed = "z1AeiPT496wWmo9BG2QYXeTusgFSZPNG3T9wNeTtjrQ3rCB"
const defaultTestTenantName = "test"
const DID_SEEDS = {};
const TENANT_ACCESS_TOKENS = {}

export function setConfig() {
  CONFIG = parseConfig();
}

async function parseTenantSeeds() {
  const allEnvVars = process.env;
  const didSeedKeys = Object.getOwnPropertyNames(allEnvVars)
    .filter(key => key.toUpperCase().startsWith('TENANT_SEED_')) 
  for(const key of didSeedKeys) {
    let value = allEnvVars[key]
    if (value === 'generate') {
      value = await generateSecretKeySeed(); 
    } 
    const tenantName = key.slice(12).toLowerCase()
    DID_SEEDS[tenantName] = await decodeSeed(value)
  }
  // add in the default test key
  DID_SEEDS[defaultTestTenantName] = await decodeSeed(defaultTestSeed)


}

function parseTenantTokens() {
  const allEnvVars = process.env;
  const tenantKeys = Object.getOwnPropertyNames(allEnvVars)
    .filter(key => key.toUpperCase().startsWith('TENANT_TOKEN_')) 
  for(const key of tenantKeys) {
    let value = allEnvVars[key]
    const tenantName = key.slice(13).toLowerCase()
    TENANT_ACCESS_TOKENS[tenantName] = value
  }

}

function parseConfig() {
  const env = process.env
  const config = Object.freeze({
    enableHttpsForDev: env.ENABLE_HTTPS_FOR_DEV?.toLowerCase() === 'true',
    enableStatusAllocation: env.ENABLE_STATUS_ALLOCATION?.toLowerCase() === 'true' ,
    port: env.PORT ? parseInt(env.PORT) : defaultPort,
    credStatusDidSeed: env.CRED_STATUS_DID_SEED,
    credStatusAccessToken: env.CRED_STATUS_ACCESS_TOKEN, 
    credStatusRepoName: env.CRED_STATUS_REPO_NAME, 
    credStatusMetaRepoName: env.CRED_STATUS_META_REPO_NAME, 
    credStatusRepoOrgName: env.CRED_STATUS_REPO_OWNER
  });
  return config
}

export function getConfig() {
  if (!CONFIG) {
     setConfig()
  }
  return CONFIG;
}

export function resetConfig() {
  CONFIG = null;
}

export async function getTenantSeed(tenantName) {
  if (! Object.keys(DID_SEEDS).length) {
    await parseTenantSeeds()
  }
  if (DID_SEEDS.hasOwnProperty(tenantName)) {
    return DID_SEEDS[tenantName];
  } else {
    return null
  }
}

export function getTenantToken(tenantName) {
  if (! Object.keys(TENANT_ACCESS_TOKENS).length) {
     parseTenantTokens()
  }
  if (TENANT_ACCESS_TOKENS.hasOwnProperty(tenantName)) {
    return TENANT_ACCESS_TOKENS[tenantName];
  } else {
    return null
  }
}

const decodeSeed = async (secretKeySeed) => {
    let secretKeySeedBytes // Uint8Array;
    if (secretKeySeed.startsWith('z')) {
        // This is a multibase-decoded key seed, like those generated by @digitalcredentials/did-cli
        secretKeySeedBytes = decodeSecretKeySeed({ secretKeySeed });
    } else if (secretKeySeed.length >= 32) {
        secretKeySeedBytes = (new TextEncoder()).encode(secretKeySeed).slice(0, 32);
    } else {
        throw TypeError('"secretKeySeed" must be at least 32 bytes, preferably multibase-encoded.');
    }
    return secretKeySeedBytes;
}